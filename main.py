import urllib

import telebot
from telebot import types
import requests

import config


bot = telebot.TeleBot(config.token)


def load_photo(url):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ —Å url"""
    f = open('images/out.jpg', 'wb')
    f.write(urllib.request.urlopen(url).read())
    f.close()
    return open('images/out.jpg', 'rb')


def create_markup(id=None):
    """–ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É"""
    markup = types.InlineKeyboardMarkup(row_width=2)
    detail = types.InlineKeyboardButton('–û–ø–∏—Å–∞–Ω–∏–µ üîç', callback_data=f'd{id}')
    add_to_cart = types.InlineKeyboardButton('–í –∫–æ—Ä–∑–∏–Ω—É ‚úÖ', callback_data=f'+{id}')
    return markup.add(detail, add_to_cart)


def create_markup_sale(id):
    """–ö–Ω–æ–ø–∫–∏ –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏–µ –∏ —É–≤–µ–ª–µ—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ"""
    markup = types.InlineKeyboardMarkup(row_width=2)
    add_to_cart = types.InlineKeyboardButton('‚ûï', callback_data=f'+{id}')
    remove_from_cart = types.InlineKeyboardButton('‚ûñ', callback_data=f'-{id}')
    return markup.add(add_to_cart, remove_from_cart)


def get_data(pref):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ url
    :param pref: –¥–æ–±–∞–≤–æ—á–Ω—ã–π url
    :return: json data
    """
    url = config.url + pref
    return requests.get(url).json()


def is_sale(item):
    """–î–æ–±–∞–≤–ª—è–µ—Ç SALE –∏ —Å–∫–∏–¥–∫—É –≤ % –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ —Å–æ —Å–∫–∏–¥–∫–æ–π"""
    if item['discount_price']:
        sale = round((1 - (item['discount_price'] / item['price'])) * 100)
        mess = f'<b>{item["title"]}</b>' + '\n' + f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {item["category"]}' + '\n' + f'–¶–µ–Ω–∞ {item["discount_price"]}' \
               + '‚ùóÔ∏èüí∏' + f' (SALE {sale}%)'
    else:
        mess = f'<b>{item["title"]}</b>' + '\n' + f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {item["category"]}' + '\n' + f'–¶–µ–Ω–∞ {item["price"]}'
    return mess


def item_detail(item):
    mess = is_sale(item)
    mess += '\n' + f'\n {item["description"]}'
    return mess


def get_item(item, message):
    """–í—ã–≤–æ–¥–∏—Ç —Ç–æ–≤–∞—Ä —Å —Ñ–æ—Ç–æ"""
    mess = is_sale(item)
    img = load_photo(item['image'])
    markup = create_markup(item['id'])
    bot.send_photo(message.from_user.id, img, caption=mess, parse_mode='html', reply_markup=markup)


def get_token():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–∫–µ–Ω –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    f = open('auth_token.txt')
    token = f.read()
    f.close()
    return token


def items_for_cart(message, item):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã—Ö –≤ –∫–æ—Ä–∑–∏–Ω—É —Ç–æ–≤–∞—Ä–æ–≤"""
    if item['discount_price']:
        sale = round((1 - (item['discount_price'] / item['price'])) * 100)
        mess = f'<b>{item["item"]}</b>' + '\n' + \
               f'–¶–µ–Ω–∞ {item["discount_price"]} $ ' + f'x {item["quantity"]}' \
               + f'= {item["total_amount"]} $' + f' (SALE {sale}%)'
    else:
        mess = f'<b>{item["item"]}</b>' + '\n' + \
               f'–¶–µ–Ω–∞ {item["price"]} $ ' + f'x {item["quantity"]}' \
               + f'= {item["total_amount"]} $'
    markup = create_markup_sale(item['id'])
    bot.send_message(message.from_user.id, mess, parse_mode='html', reply_markup=markup)


@bot.message_handler(commands=['start'])
def handle_text(message):
    sticker = open('stickers/ok.tgs', 'rb')
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    categories = types.KeyboardButton('–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ üóÇ')
    items = types.KeyboardButton('–í—Å–µ —Ç–æ–≤–∞—Ä—ã üëï')
    cart = types.KeyboardButton('–ö–æ—Ä–∑–∏–Ω–∞ üóë')
    markup.add(items, categories, cart)
    bot.send_message(message.from_user.id, text='–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –≤—ã –≤ –º–∞–≥–∞–∑–∏–Ω–µ ECOMMERCE', reply_markup=markup)
    bot.send_sticker(message.from_user.id, sticker)


@bot.message_handler(commands=['login'])
def handle_text(message):
    # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    mess = '<b>–î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ —Å–ª–µ–¥—É—â–µ–π —Ñ–æ—Ä–º–µ:</b>\nlogin:\nusername\npassword'
    bot.send_message(message.from_user.id, mess, parse_mode='html')


@bot.message_handler(content_types=['text'])
def handle_text(message):
    """–í—ã–≤–æ–¥ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π, –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤, –∫–æ—Ä–∑–∏–Ω—ã–± –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""

    # –ê–≤—Ç–æ–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if message.text[:6] == 'login:':
        try:
            data = message.text[7:].split('\n')
            username = data[0]
            password = data[1]
            response = requests.post('http://127.0.0.1:8000/auth/token/login/', data={
                'username': username,
                'password': password,
            }).json()
            auth_token = response["auth_token"]

            f = open('auth_token.txt', 'w')
            f.write(auth_token)
            f.close()

            sticker = open('stickers/Welcome.tgs', 'rb')
            mess = f'–í—ã–ø–æ–ª–Ω–µ–Ω –≤—Ö–æ–¥ –ø–æ–¥ –ª–æ–≥–∏–Ω–æ–º <b>{username}</b>'
            bot.send_message(message.from_user.id, mess, parse_mode='html')
            mess = 'Welcome to the club, buddy!'
            bot.send_message(message.from_user.id, mess, parse_mode='html')
            bot.send_sticker(message.from_user.id, sticker)
        except:
            mess = f'–û—à–∏–±–∫–∞! –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...'
            bot.send_message(message.from_user.id, mess, parse_mode='html')
            sticker = open('stickers/fuck.tgs', 'rb')
            bot.send_sticker(message.from_user.id, sticker)

    # –í—ã–≤–æ–¥ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    if message.text == '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ üóÇ' or message.text == '–∫–∞—Ç–µ–≥–æ—Ä–∏–∏':
        categories = get_data('category')
        mess = ''
        for category in categories:
            mess += f'{category["id"]}' + ') ' + f'<b>{category["title"]}</b>' + ' ' + f'(—Ç–æ–≤–∞—Ä–æ–≤ - {category["items_count"]})' \
                    + '\n'
        mess += '\n'
        mess += 'üì©–û—Ç–ø—Ä–∞–≤—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –µ–µ –Ω–æ–º–µ—Ä–æ–º –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤, –Ω–∞–ø—Ä–∏–º–µ—Ä "–∫–∞—Ç–µ–≥–æ—Ä–∏—è 1"'
        bot.send_message(message.from_user.id, mess, parse_mode='html')

    # –í—ã–≤–æ–¥ —Ç–æ–≤–∞—Ä–æ–≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if message.text[0:9] == '–∫–∞—Ç–µ–≥–æ—Ä–∏—è' or message.text[0:9] == '–ö–∞—Ç–µ–≥–æ—Ä–∏—è':
        try:
            category = get_data(f'category/{message.text[10:]}')
            bot.send_message(message.from_user.id, f'–¢–æ–≤–∞—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category["title"]}: \n', parse_mode='html')
            for item in category['category_items']:
                get_item(item, message)
        except:
            sticker = open('stickers/incorrect_cat.webp', 'rb')
            bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', parse_mode='html')
            bot.send_sticker(message.from_user.id, sticker)

    # –í—ã–≤–æ–¥ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤
    if message.text == '–í—Å–µ —Ç–æ–≤–∞—Ä—ã üëï':
        items = get_data('items')
        for item in items:
            get_item(item, message)

    # –í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ
    if message.text == '–ö–æ—Ä–∑–∏–Ω–∞ üóë':
        token = get_token()
        data = requests.get('http://127.0.0.1:8000/api/v1/order/', headers={
                'Authorization': f'Token {token}',
            }).json()
        bot.send_message(message.from_user.id, '–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤:', parse_mode='html')
        for item in data[0]['items']:
            items_for_cart(message=message, item=item)
        bot.send_message(message.from_user.id,
                         f'–û–±—â–∞—è —Å—É–º–º–∞ –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞: <b>{data[0]["total_order_amount"]} $</b>',
                         parse_mode='html')


@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    """ Handling messages from inline keyboard (add to cart, delete from cart)"""

    if call.message:

    # –£–≤–µ–ª–µ—á–µ–Ω–∏–µ –∫–æ–ª–∏—á—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ
        if call.data[0] == '+':
            id = call.data[1:]
            url = config.url + f'order/{id}/'
            token = get_token()
            response = requests.post(url, headers={'Authorization': f'Token {token}'})
            bot.send_message(call.message.chat.id, '–¢–æ–≤–∞—Ä –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É ‚úÖ')

    # –£–º–µ–Ω—å—à–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ
        if call.data[0] == '-':
            id = call.data[1:]
            url = config.url + f'order/{id}/'
            token = get_token()
            response = requests.delete(url, headers={'Authorization': f'Token {token}'})
            bot.send_message(call.message.chat.id, '–¢–æ–≤–∞—Ä –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã ‚ùå')

    # –í—ã–≤–æ–¥ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ
        if call.data[0] == 'd':
            id = call.data[1:]
            url = f'items/{id}/'
            item = get_data(url)
            mess = item_detail(item)
            img = load_photo(item['image'])
            markup = types.InlineKeyboardMarkup(row_width=1)
            add_to_cart = types.InlineKeyboardButton('–í –∫–æ—Ä–∑–∏–Ω—É ‚úÖ', callback_data=f'+{item["id"]}')
            markup.add(add_to_cart)
            bot.send_photo(call.message.chat.id, img, caption=mess, parse_mode='html', reply_markup=markup)

bot.polling(none_stop=True)